# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _amgio
else:
    import _amgio

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def py_ConvertSU2toInria(MshNam: "char *", SolNam: "char *", OutNam: "char *") -> "int":
    return _amgio.py_ConvertSU2toInria(MshNam, SolNam, OutNam)

def py_ConvertInriatoSU2(MshNam: "char *", SolNam: "char *", OutNam: "char *") -> "int":
    return _amgio.py_ConvertInriatoSU2(MshNam, SolNam, OutNam)

def py_SplitSolution(SolNam: "char *", dim: "int", prefix: "char *", adap_sensor: "char *") -> "int":
    return _amgio.py_SplitSolution(SolNam, dim, prefix, adap_sensor)

def py_ReadMeshAndSol(MshNam: "char *", SolNam: "char *", pyVer: "PyObject *", pyCor: "PyObject *", pyTri: "PyObject *", pyTet: "PyObject *", pyEdg: "PyObject *", pyHex: "PyObject *", pyQua: "PyObject *", pyPyr: "PyObject *", pyPri: "PyObject *", pySol: "PyObject *", pySolHeader: "PyObject *", pyMarkers: "PyObject *") -> "void":
    return _amgio.py_ReadMeshAndSol(MshNam, SolNam, pyVer, pyCor, pyTri, pyTet, pyEdg, pyHex, pyQua, pyPyr, pyPri, pySol, pySolHeader, pyMarkers)

def py_ReadMesh(MshNam: "char *", pyVer: "PyObject *", pyCor: "PyObject *", pyTri: "PyObject *", pyTet: "PyObject *", pyEdg: "PyObject *", pyHex: "PyObject *", pyQua: "PyObject *", pyPyr: "PyObject *", pyPri: "PyObject *", pyMarkers: "PyObject *") -> "void":
    return _amgio.py_ReadMesh(MshNam, pyVer, pyCor, pyTri, pyTet, pyEdg, pyHex, pyQua, pyPyr, pyPri, pyMarkers)

def py_WriteMeshAndSol(MshNam: "char *", SolNam: "char *", pyVer: "PyObject *", pyCor: "PyObject *", pyTri: "PyObject *", pyTet: "PyObject *", pyEdg: "PyObject *", pyHex: "PyObject *", pyQua: "PyObject *", pyPyr: "PyObject *", pyPri: "PyObject *", pySol: "PyObject *", pySolHeader: "PyObject *", pyMarkers: "PyObject *", Dim: "int") -> "void":
    return _amgio.py_WriteMeshAndSol(MshNam, SolNam, pyVer, pyCor, pyTri, pyTet, pyEdg, pyHex, pyQua, pyPyr, pyPri, pySol, pySolHeader, pyMarkers, Dim)

def py_WriteMesh(MshNam: "char *", pyVer: "PyObject *", pyCor: "PyObject *", pyTri: "PyObject *", pyTet: "PyObject *", pyEdg: "PyObject *", pyHex: "PyObject *", pyQua: "PyObject *", pyPyr: "PyObject *", pyPri: "PyObject *", pyMarkers: "PyObject *", Dim: "int") -> "void":
    return _amgio.py_WriteMesh(MshNam, pyVer, pyCor, pyTri, pyTet, pyEdg, pyHex, pyQua, pyPyr, pyPri, pyMarkers, Dim)

def py_WriteSolution(SolNam: "char *", pyVer: "PyObject *", pySol: "PyObject *", pySolHeader: "PyObject *", NbrVer: "int", Dim: "int") -> "void":
    return _amgio.py_WriteSolution(SolNam, pyVer, pySol, pySolHeader, NbrVer, Dim)


